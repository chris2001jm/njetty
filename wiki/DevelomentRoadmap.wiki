#summary To have a full-featured Dotnet/ASP.net web server implemented entirely in C#, The Project will be based entirely in Jetty Web Server in Java.
#labels RoadMap,Featured,Phase-Design

= Roadmap for 1.0 Alpha-Release =

Port Jetty from java to C# dotnet, with a goal of running ASP.net and other dotnet related web platforms.


=Porting Roadmap by Package/Namespace=

==Port Jetty Utils to C# NJetty.Util==
 * *Components* (_done_)
    * AbstractLifeCycle (_done_)
    * Container (_done_)
    * ContainerRelationship (_done_)
    * IContainerListner (_done_)
    * ILifeCycle (_done_)
    * IListner (_done_) 
 * *Logger (Log in jetty)* (_done_)
    * Log : Static Class for logging. can use NLog or StdErrLog (_done_) 
    * NLogLog : Log Addapter for NLog. (_done_)
    * StdErrLog : log using Console.Error. (_done_)
 * *Resource*
    * BadResource
    * FileResource
    * JarFileResource (just port everything for now)
    * Resource
    * ResourceCollection
    * IResourceFactory (_done_)
    * URLResource
 * *Threading*
    * BoundedThreadPool (deprecated by jetty, might not need to implement)
    * QueuedThreadPool
    * QueuedThreadPoolPoolThread
    * QueuedThreadPoolLock (_done_)
    * IThreadPool (_done_)
    * Timeout (_done_)
    * TimeoutTask (_done_)
 * *Util*
    * ArrayQue
    * IAttributes
    * IAttributesMap    
    * ByteArrayISO8859Writer
    * ByteArrayOutputStream2
    * DateCache
    * Utf8StringBuffer
    * URIUtil
    * Loader
    * QuotedStringTokenizer
    * Scanner
    * IO
    * TypeUtil
    * StringUtil
    * SingletonList
    * Utf8StringBuilder
    * MultiException
    * RolloverFileOutputStream
    * MultiMap
    * MultiPartOutputStream
    * MultiPartWriter
    * StringMap
    * IntrospectionUtil
    * LazyList (_done_)
    * UrlEncoded
 * *Util.Ajax*
    * AjaxFilter
    * IContinuation (deprecated by jetty, might not need to implement)
    * ContinuationSupport
    * JSON
    * JSONDateConvertor
    * JSONEnumConvertor
    * JSONObjectConvertor
    * WaitingContinuation
 * *TODO.Package*
    * Todo.Class

==Port Jetty Utils Test to C# as NJetty.Util.Test== 
 * *Component* (_done_)
    * LifeCycleTest (_done_)
    * LifeCycleListenerTest (_done_)
    * TestListener (_done_)
 * *Logger* (_done_)
    * LogTest (_done_)
 * *Resource*
    * (test data in this package TestData)
    * ResourceTest
    * ResourceCollectionTest
 * *Thread*
    * ThreadPoolTest
    * TimeoutTest
 * *Util*
    * LazyListTest (_done_)
    * Utf8StringBufferTest
    * ArrayQueueTest
    * URITest
    * QuotedStringTokenizerTest
    * StringMapTest
    * Utf8StringBuilderTest
    * TestIntrospectionUtil
    * URLEncodedTest
    * DateCacheTest
    * StringUtilTest
 * *Util.Ajax*
    * JSONTest

==Port Jetty Core to C# as NJetty==
 * *TODO.Package*
    * Todo.Class
 * *TODO.Package*
    * Todo.Class

==Port Jetty Core Tests to as NJetty.Test==
 * *TODO.Package*
    * Todo.Class
 * *TODO.Package*
    * Todo.Class
	
=Porting Roadmap by Package/Namespace=